<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"></xsd:import>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="name" type="xsd:string"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AggregateFunctions.Text" xml:space="preserve">
    <value>Aggregate Functions</value>
  </data>
  <data name="WindowFunctions.Text" xml:space="preserve">
    <value>Window</value>
  </data>
  <data name="CountDistinctAggregate.Description" xml:space="preserve">
    <value>CountDistinct(Value)
Returns the number of unique objects in a collection.</value>
  </data>
  <data name="MedianAggregate.Description" xml:space="preserve">
    <value>Median(Value)
Returns the median of the values in a collection.</value>
  </data>
  <data name="StdDevAggregate.Description" xml:space="preserve">
    <value>StdDev(Value)
Returns an estimate of the standard deviation of a population, where the sample is a subset of the entire population.</value>
  </data>
  <data name="StdDevpAggregate.Description" xml:space="preserve">
    <value>StdDevp(Value)
Returns the standard deviation of a population, where the population is the entire data to be summarized.</value>
  </data>
  <data name="VarAggregate.Description" xml:space="preserve">
    <value>Var(Value)
Returns an estimate of the variance of a population, where the sample is a subset of the entire population.</value>
  </data>
  <data name="VarpAggregate.Description" xml:space="preserve">
    <value>Varp(Value)
Returns the variance of a population, where the population is the entire data to be summarized.</value>
  </data>
  <data name="AggrFunction.Description" xml:space="preserve">
    <value>Aggr(SummaryExpression, Dimension1, Dimension2, ...)
Aggregates underlying data using the detail level specified by a predefined set of dimensions and a specified summary function.</value>
  </data>
  <data name="LastFunction.Description" xml:space="preserve">
    <value>Last()
Returns the number of rows from the current row to the last row in the window.
  </value>
  </data>
  <data name="FirstFunction.Description" xml:space="preserve">
    <value>First()
Returns the number of rows from the current row to the first row in the window.
  </value>
  </data>
  <data name="IndexFunction.Description" xml:space="preserve">
    <value>Index()
Returns the index of the current row in the window.
  </value>
  </data>
  <data name="SizeFunction.Description" xml:space="preserve">
    <value>Size()
Returns the number of rows in the window.
  </value>
  </data>
  <data name="WindowAvgFunction.Description" xml:space="preserve">
    <value>WindowAvg(SummaryExpression, StartOffset, EndOffset)
Returns the average of the expression within the window, which is defined using offsets from the current row.
  </value>
  </data>
  <data name="WindowCountFunction.Description" xml:space="preserve">
    <value>WindowCount(SummaryExpression, StartOffset, EndOffset)
Returns the count of the expression within the window.
  </value>
  </data>
  <data name="WindowCountDistinctFunction.Description" xml:space="preserve">
    <value>WindowCountDistinct(SummaryExpression, StartOffset, EndOffset)
Returns the distinct count of the expression within the window.
  </value>
  </data>
  <data name="WindowMaxFunction.Description" xml:space="preserve">
    <value>WindowMax(SummaryExpression, StartOffset, EndOffset)
Returns the maximum of the expression within the window.
  </value>
  </data>
  <data name="WindowMinFunction.Description" xml:space="preserve">
    <value>WindowMin(SummaryExpression, StartOffset, EndOffset)
Returns the minimum of the expression within the window.
  </value>
  </data>
  <data name="WindowMedianFunction.Description" xml:space="preserve">
    <value>WindowMedian(SummaryExpression, StartOffset, EndOffset)
Returns the median of the expression within the window.
  </value>
  </data>
  <data name="WindowModeFunction.Description" xml:space="preserve">
    <value>WindowMode(SummaryExpression, StartOffset, EndOffset)
Returns the mode of the expression within the window.
  </value>
  </data>
  <data name="WindowSumFunction.Description" xml:space="preserve">
    <value>WindowSum(SummaryExpression, StartOffset, EndOffset)
Returns the sum of the expression within the window.
  </value>
  </data>
  <data name="WindowVarFunction.Description" xml:space="preserve">
    <value>WindowVar(SummaryExpression, StartOffset, EndOffset)
Returns the variance of the expression within the window.
  </value>
  </data>
  <data name="WindowVarpFunction.Description" xml:space="preserve">
    <value>WindowVarp(SummaryExpression, StartOffset, EndOffset)
Returns the biased variance of the expression within the window.
  </value>
  </data>
  <data name="WindowStdDevFunction.Description" xml:space="preserve">
    <value>WindowStdDev(SummaryExpression, StartOffset, EndOffset)
Returns the sample standard deviation of the expression within the window.
  </value>
  </data>
  <data name="WindowStdDevpFunction.Description" xml:space="preserve">
    <value>WindowStdDevp(SummaryExpression, StartOffset, EndOffset)
Returns the biased standard deviation of the expression within the window.
  </value>
  </data>
  <data name="RunningAvgFunction.Description" xml:space="preserve">
    <value>RunningAvg(SummaryExpression)
Returns the running average of the specified expression from the first row in the window to the current row.
  </value>
  </data>
  <data name="RunningCountFunction.Description" xml:space="preserve">
    <value>RunningCount(SummaryExpression)
Returns the running count of the specified expression from the first row in the window to the current row.
  </value>
  </data>
  <data name="RunningMaxFunction.Description" xml:space="preserve">
    <value>RunningMax(SummaryExpression)
Returns the running maximum of the specified expression from the first row in the window to the current row.
  </value>
  </data>
  <data name="RunningMinFunction.Description" xml:space="preserve">
    <value>RunningMin(SummaryExpression)
Returns the running minimum of the specified expression from the first row in the window to the current row.
  </value>
  </data>
  <data name="RunningSumFunction.Description" xml:space="preserve">
    <value>RunningSum(SummaryExpression)
Returns the running sum of the specified expression from the first row in the window to the current row.
  </value>
  </data>
  <data name="RankCompetitionFunction.Description" xml:space="preserve">
    <value>RankCompetition(SummaryExpression, ['asc', 'desc'])
Returns the standard competition rank for the current row in the window.
  </value>
  </data>
  <data name="RankDenseFunction.Description" xml:space="preserve">
    <value>RankDense(SummaryExpression, ['asc', 'desc'])
Returns the dense rank for the current row in the window.
  </value>
  </data>
  <data name="RankUniqueFunction.Description" xml:space="preserve">
    <value>RankUnique(SummaryExpression, ['asc', 'desc'])
Returns the unique rank for the current row in the window.
  </value>
  </data>
  <data name="RankModifiedFunction.Description" xml:space="preserve">
    <value>RankModified(SummaryExpression, ['asc', 'desc'])
Returns the modified competition rank for the current row in the window.
  </value>
  </data>
  <data name="RankPercentileFunction.Description" xml:space="preserve">
    <value>RankPercentile(SummaryExpression, ['asc', 'desc'])
Returns the percentile rank for the current row in the window.
  </value>
  </data>
  <data name="TotalFunction.Description" xml:space="preserve">
    <value>Total(SummaryExpression)
Returns the total for the specified expression in a table calculation window.
  </value>
  </data>
  <data name="LookupFunction.Description" xml:space="preserve">
    <value>Lookup(SummaryExpression, Position)
Returns the value of the expression in a target position specified as a relative offset from the current position.
  </value>
  </data>
  <data name="Fields Description Prefix" xml:space="preserve">
    <value>The type of this field is: </value>
  </data>
</root>